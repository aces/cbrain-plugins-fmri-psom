<?xml version="1.0" standalone="no"?>
<!DOCTYPE niak_pipeline_fmri_preprocess>
<niak_pipeline_fmri_preprocess>

<%
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  
#
%>

<%
   full_path   = fmri_study.cache_full_path
   session_ref = params[:motion_correction][:session_ref]
%>
  <!-- XML generated automatically by <%= self.class.to_s %> in <%= self.revision_info.svn_id_pretty_file_rev_author_date %> -->

  <files_in>

<%
  subject_list = fmri_study.list_subjects()
  raise "Error: no subjects found for fMRI study '#{fmri_study.name}' ?!?" if subject_list.blank?
  subject_list.each do |subject|
    anat_paths = fmri_study.list_anat_files(:subjects => subject)
    if anat_paths.blank?
      task.addlog("Error: No anatomical scan files for subject '#{subject}' ?!? Skipping.")
      next
    end
    sessions = fmri_study.list_sessions(:subjects => subject)
    if sessions.blank?
      task.addlog("Error: No sessions found for subject '#{subject}' ?!? Skipping.")
      next
    end
    if ! sessions.include?( session_ref )
      task.addlog("Error: Subject '#{subject}' does not contain a session ref '#{session_ref}' ?!? Skipping.")
      next
    end
    unless sessions.detect { |s| ! fmri_study.list_scan_files(:subjects => subject, :sessions => s).blank? }
      task.addlog("Error: No sessions of subject '#{subject}' contain any scan files ?!? Skipping.")
      next
    end
%>
    <subject>
      <name>"<%= x(sane_id(subject)) %>"</name>
      <anat>"<%= x("#{full_path}/#{anat_paths[0]}") %>"</anat>
      <fmri>
<%
      sessions.each_with_index do |session,session_number|
        scan_paths = fmri_study.list_scan_files(:subjects => subject, :sessions => session)
        if scan_paths.blank?
          task.addlog("Session '#{session}' of subject '#{subject}' contain no scan files. Skipping.")
          next
        end
%>
        <session>
          <name>"<%= x(sane_id(session)) %>"</name>
<%        scan_paths.each do |scan| %>
          <path>"<%= x("#{full_path}/#{scan}") %>"</path>
<%        end %>
        </session>
<%    end %>
      </fmri>
    </subject>
<% end %>

  </files_in>

  <opt>
    <folder_out>"<%= x("#{task.full_cluster_workdir}/#{task.pipeline_run_dir}") %>"</folder_out>
    <size_output>"<%= x(params[:size_output]) %>"</size_output><!-- 'all' or 'quality_control' -->

    <slice_timing>
      <type_acquisition>"<%= x(params[:slice_timing][:type_acquisition]) %>"</type_acquisition><!-- 'interleaved', 'interleaved ascending', 'interleaved descending', 'sequential', 'sequential ascending', 'sequential descending' -->
      <type_scanner>"<%= x(params[:slice_timing][:type_scanner]) %>"</type_scanner><!-- 'Siemens' or anything else -->
      <delay_in_tr><%= x(params[:slice_timing][:delay_in_tr]) %></delay_in_tr><!-- float -->
      <flag_skip><%= x(params[:slice_timing][:flag_skip]) %></flag_skip><!-- boolean -->
    </slice_timing>

    <motion_correction>
      <suppress_vol><%= x(params[:motion_correction][:suppress_vol]) %></suppress_vol><!-- integer -->
      <session_ref>"<%= x(session_ref) %>"</session_ref><!-- session to refer to -->
      <flag_skip><%= x(params[:motion_correction][:flag_skip]) %></flag_skip><!-- boolean -->
    </motion_correction>

    <t1_preprocess>
      <nu_correct>
        <distance><%= x(params[:t1_preprocess][:nu_correct][:distance]) %></distance><!-- 50 (3T), 200 (1.5T) -->
      </nu_correct>
    </t1_preprocess>

    <anat2func>
      <init>"<%= x(params[:anat2func][:init]) %>"</init><!-- 'identity' or 'center' -->
    </anat2func>

    <time_filter>
      <hp><%= x(params[:time_filter][:hp]) %></hp><!-- float or '-Inf' -->
      <lp><%= x(params[:time_filter][:lp]) %></lp><!-- float or 'Inf' -->
    </time_filter>

    <corsica>
      <sica>
        <nb_comp><%= x(params[:corsica][:sica][:nb_comp]) %></nb_comp><!-- integer -->
      </sica><!-- integer -->
      <threshold><%= x(params[:corsica][:threshold]) %></threshold><!-- float -->
      <flag_skip><%= x(params[:corsica][:flag_skip]) %></flag_skip><!-- boolean -->
    </corsica>

    <resample_vol>
      <interpolation>"<%= x(params[:resample_vol][:interpolation]) %>"</interpolation><!-- 'sinc' or 'tricubic' -->
      <voxel_size><%= x(params[:resample_vol][:voxel_size]) %></voxel_size><!-- integer -->
      <flag_skip><%= x(params[:resample_vol][:flag_skip]) %></flag_skip><!-- boolean -->
    </resample_vol>

    <smooth_vol>
      <fwhm><%= x(params[:smooth_vol][:fwhm]) %></fwhm><!-- integer -->
      <flag_skip><%= x(params[:smooth_vol][:flag_skip]) %></flag_skip><!-- boolean -->
    </smooth_vol>

  </opt>

</niak_pipeline_fmri_preprocess>

